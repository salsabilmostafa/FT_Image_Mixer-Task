# -*- coding: utf-8 -*-0

# Form implementation generated from reading ui file 'UI.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtCore import Qt
import cv2
import numpy as np
from PyQt5.QtWidgets import QApplication
from PyQt5.QtCore import QTimer
import sys
from functools import partial


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(2474, 1675)
        MainWindow.setStyleSheet("background:rgb(193, 193, 193)")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frame_5 = QtWidgets.QFrame(self.centralwidget)
        self.frame_5.setStyleSheet("background-color: rgb(161, 161, 161);")
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.frame = QtWidgets.QFrame(self.frame_5)
        self.frame.setGeometry(QtCore.QRect(30, 10, 741, 301))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.Image_1_View = QtWidgets.QGraphicsView(self.frame)
        self.Image_1_View.setGeometry(QtCore.QRect(10, 0, 371, 291))
        self.Image_1_View.setObjectName("Image_1_View")
        self.Img1_Comp_View = QtWidgets.QGraphicsView(self.frame)
        self.Img1_Comp_View.setGeometry(QtCore.QRect(400, 0, 331, 291))
        self.Img1_Comp_View.setObjectName("Img1_Comp_View")
        self.frame_2 = QtWidgets.QFrame(self.frame_5)
        self.frame_2.setGeometry(QtCore.QRect(780, 10, 741, 301))
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.Image_2_View = QtWidgets.QGraphicsView(self.frame_2)
        self.Image_2_View.setGeometry(QtCore.QRect(10, 0, 371, 291))
        self.Image_2_View.setObjectName("Image_2_View")
        self.Img2_Comp_View = QtWidgets.QGraphicsView(self.frame_2)
        self.Img2_Comp_View.setGeometry(QtCore.QRect(400, 0, 331, 291))
        self.Img2_Comp_View.setObjectName("Img2_Comp_View")
        self.frame_3 = QtWidgets.QFrame(self.frame_5)
        self.frame_3.setGeometry(QtCore.QRect(40, 310, 731, 311))
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.Image_3_View = QtWidgets.QGraphicsView(self.frame_3)
        self.Image_3_View.setGeometry(QtCore.QRect(0, 10, 371, 291))
        self.Image_3_View.setObjectName("Image_3_View")
        self.Img3_Comp_View = QtWidgets.QGraphicsView(self.frame_3)
        self.Img3_Comp_View.setGeometry(QtCore.QRect(390, 10, 331, 291))
        self.Img3_Comp_View.setObjectName("Img3_Comp_View")
        self.frame_4 = QtWidgets.QFrame(self.frame_5)
        self.frame_4.setGeometry(QtCore.QRect(780, 310, 761, 311))
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.Image_4_View = QtWidgets.QGraphicsView(self.frame_4)
        self.Image_4_View.setGeometry(QtCore.QRect(10, 10, 371, 291))
        self.Image_4_View.setObjectName("Image_4_View")
        self.Img4_Comp_View = QtWidgets.QGraphicsView(self.frame_4)
        self.Img4_Comp_View.setGeometry(QtCore.QRect(400, 10, 331, 291))
        self.Img4_Comp_View.setObjectName("Img4_Comp_View")
        self.frame_6 = QtWidgets.QFrame(self.frame_5)
        self.frame_6.setGeometry(QtCore.QRect(1700, 0, 211, 584))
        self.frame_6.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_6.setObjectName("frame_6")
        self.label_25 = QtWidgets.QLabel(self.frame_6)
        self.label_25.setGeometry(QtCore.QRect(60, 20, 151, 20))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_25.setFont(font)
        self.label_25.setObjectName("label_25")
        self.Img_Nb_ComboBox = QtWidgets.QComboBox(self.frame_6)
        self.Img_Nb_ComboBox.setGeometry(QtCore.QRect(10, 60, 191, 22))
        self.Img_Nb_ComboBox.setStyleSheet(
            "background-color: rgb(255, 255, 255);")
        self.Img_Nb_ComboBox.setObjectName("Img_Nb_ComboBox")
        self.label_26 = QtWidgets.QLabel(self.frame_6)
        self.label_26.setGeometry(QtCore.QRect(60, 100, 151, 20))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_26.setFont(font)
        self.label_26.setObjectName("label_26")
        self.FT_Comp_ComboBox = QtWidgets.QComboBox(self.frame_6)
        self.FT_Comp_ComboBox.setGeometry(QtCore.QRect(10, 130, 191, 22))
        self.FT_Comp_ComboBox.setStyleSheet(
            "background-color: rgb(255, 255, 255);")
        self.FT_Comp_ComboBox.setObjectName("FT_Comp_ComboBox")
        self.Mixing_Btn = QtWidgets.QPushButton(self.frame_6)
        self.Mixing_Btn.setGeometry(QtCore.QRect(60, 180, 93, 28))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.Mixing_Btn.setFont(font)
        self.Mixing_Btn.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.Mixing_Btn.setObjectName("Mixing_Btn")
        self.Stop_Mixing_Btn = QtWidgets.QPushButton(self.frame_6)
        self.Stop_Mixing_Btn.setGeometry(QtCore.QRect(60, 240, 93, 28))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.Stop_Mixing_Btn.setFont(font)
        self.Stop_Mixing_Btn.setStyleSheet(
            "background-color: rgb(255, 255, 255);")
        self.Stop_Mixing_Btn.setObjectName("Stop_Mixing_Btn")
        self.Region_Mixing_Btn = QtWidgets.QPushButton(self.frame_6)
        self.Region_Mixing_Btn.setGeometry(QtCore.QRect(60, 290, 93, 28))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.Region_Mixing_Btn.setFont(font)
        self.Region_Mixing_Btn.setStyleSheet(
            "background-color: rgb(255, 255, 255);")
        self.Region_Mixing_Btn.setObjectName("Region_Mixing_Btn")
        self.frame_7 = QtWidgets.QFrame(self.frame_5)
        self.frame_7.setGeometry(QtCore.QRect(940, 625, 1501, 541))
        self.frame_7.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_7.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_7.setObjectName("frame_7")
        self.frame_8 = QtWidgets.QFrame(self.frame_7)
        self.frame_8.setGeometry(QtCore.QRect(530, 10, 471, 491))
        self.frame_8.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_8.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_8.setObjectName("frame_8")
        self.progressBar = QtWidgets.QProgressBar(self.frame_8)
        self.progressBar.setGeometry(QtCore.QRect(10, 60, 421, 23))
        self.progressBar.setProperty("value", 24)
        self.progressBar.setObjectName("progressBar")
        self.frame_10 = QtWidgets.QFrame(self.frame_8)
        self.frame_10.setGeometry(QtCore.QRect(50, 120, 120, 80))
        self.frame_10.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_10.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_10.setObjectName("frame_10")
        self.Output1_RadioBtn = QtWidgets.QRadioButton(self.frame_10)
        self.Output1_RadioBtn.setGeometry(QtCore.QRect(10, 10, 95, 20))
        self.Output1_RadioBtn.setObjectName("Output1_RadioBtn")
        self.Output2_RadioBtn = QtWidgets.QRadioButton(self.frame_10)
        self.Output2_RadioBtn.setGeometry(QtCore.QRect(10, 50, 95, 20))
        self.Output2_RadioBtn.setObjectName("Output2_RadioBtn")
        self.frame_13 = QtWidgets.QFrame(self.frame_8)
        self.frame_13.setGeometry(QtCore.QRect(230, 190, 161, 121))
        self.frame_13.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_13.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_13.setObjectName("frame_13")
        self.Real_Img_RadioBtn = QtWidgets.QRadioButton(self.frame_13)
        self.Real_Img_RadioBtn.setGeometry(QtCore.QRect(0, 30, 141, 20))
        self.Real_Img_RadioBtn.setObjectName("Real_Img_RadioBtn")
        self.Mag_Ph_RadioBtn = QtWidgets.QRadioButton(self.frame_13)
        self.Mag_Ph_RadioBtn.setGeometry(QtCore.QRect(0, 70, 151, 20))
        self.Mag_Ph_RadioBtn.setObjectName("Mag_Ph_RadioBtn")
        self.label_2 = QtWidgets.QLabel(self.frame_7)
        self.label_2.setGeometry(QtCore.QRect(20, 10, 91, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.Comp1_ComboBox = QtWidgets.QComboBox(self.frame_7)
        self.Comp1_ComboBox.setGeometry(QtCore.QRect(120, 10, 351, 22))
        self.Comp1_ComboBox.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                          "alternate-background-color: rgb(200, 200, 200);")
        self.Comp1_ComboBox.setObjectName("Comp1_ComboBox")
        self.Comp1_LCD = QtWidgets.QLCDNumber(self.frame_7)
        self.Comp1_LCD.setGeometry(QtCore.QRect(60, 50, 51, 23))
        self.Comp1_LCD.setObjectName("Comp1_LCD")
        self.Comp1_Slider = QtWidgets.QSlider(self.frame_7)
        self.Comp1_Slider.setGeometry(QtCore.QRect(150, 50, 291, 22))
        self.Comp1_Slider.setOrientation(QtCore.Qt.Horizontal)
        self.Comp1_Slider.setObjectName("Comp1_Slider")
        self.label_3 = QtWidgets.QLabel(self.frame_7)
        self.label_3.setGeometry(QtCore.QRect(20, 90, 91, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.Comp2_ComboBox = QtWidgets.QComboBox(self.frame_7)
        self.Comp2_ComboBox.setGeometry(QtCore.QRect(120, 90, 351, 22))
        self.Comp2_ComboBox.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                          "alternate-background-color: rgb(200, 200, 200);")
        self.Comp2_ComboBox.setObjectName("Comp2_ComboBox")
        self.Comp2_LCD = QtWidgets.QLCDNumber(self.frame_7)
        self.Comp2_LCD.setGeometry(QtCore.QRect(60, 130, 51, 23))
        self.Comp2_LCD.setObjectName("Comp2_LCD")
        self.Comp2_Slider = QtWidgets.QSlider(self.frame_7)
        self.Comp2_Slider.setGeometry(QtCore.QRect(150, 130, 291, 22))
        self.Comp2_Slider.setOrientation(QtCore.Qt.Horizontal)
        self.Comp2_Slider.setObjectName("Comp2_Slider")
        self.label_4 = QtWidgets.QLabel(self.frame_7)
        self.label_4.setGeometry(QtCore.QRect(20, 180, 91, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.Comp3_ComboBox = QtWidgets.QComboBox(self.frame_7)
        self.Comp3_ComboBox.setGeometry(QtCore.QRect(120, 180, 351, 22))
        self.Comp3_ComboBox.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                          "alternate-background-color: rgb(200, 200, 200);")
        self.Comp3_ComboBox.setObjectName("Comp3_ComboBox")
        self.Comp3_LCD = QtWidgets.QLCDNumber(self.frame_7)
        self.Comp3_LCD.setGeometry(QtCore.QRect(60, 220, 51, 23))
        self.Comp3_LCD.setObjectName("Comp3_LCD")
        self.Comp3_Slider = QtWidgets.QSlider(self.frame_7)
        self.Comp3_Slider.setGeometry(QtCore.QRect(150, 220, 291, 22))
        self.Comp3_Slider.setOrientation(QtCore.Qt.Horizontal)
        self.Comp3_Slider.setObjectName("Comp3_Slider")
        self.label_13 = QtWidgets.QLabel(self.frame_7)
        self.label_13.setGeometry(QtCore.QRect(20, 260, 91, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_13.setFont(font)
        self.label_13.setObjectName("label_13")
        self.Comp4_ComboBox = QtWidgets.QComboBox(self.frame_7)
        self.Comp4_ComboBox.setGeometry(QtCore.QRect(120, 260, 351, 22))
        self.Comp4_ComboBox.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                          "alternate-background-color: rgb(200, 200, 200);")
        self.Comp4_ComboBox.setObjectName("Comp4_ComboBox")
        self.Comp4_LCD = QtWidgets.QLCDNumber(self.frame_7)
        self.Comp4_LCD.setGeometry(QtCore.QRect(60, 290, 51, 23))
        self.Comp4_LCD.setObjectName("Comp4_LCD")
        self.Comp4_Slider = QtWidgets.QSlider(self.frame_7)
        self.Comp4_Slider.setGeometry(QtCore.QRect(150, 290, 291, 22))
        self.Comp4_Slider.setOrientation(QtCore.Qt.Horizontal)
        self.Comp4_Slider.setObjectName("Comp4_Slider")
        self.Inner_RadioBtn = QtWidgets.QRadioButton(self.frame_5)
        self.Inner_RadioBtn.setGeometry(QtCore.QRect(1570, 40, 111, 20))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.Inner_RadioBtn.setFont(font)
        self.Inner_RadioBtn.setObjectName("Inner_RadioBtn")
        self.Outer_RadioBtn = QtWidgets.QRadioButton(self.frame_5)
        self.Outer_RadioBtn.setGeometry(QtCore.QRect(1570, 80, 111, 20))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.Outer_RadioBtn.setFont(font)
        self.Outer_RadioBtn.setObjectName("Outer_RadioBtn")
        self.label = QtWidgets.QLabel(self.frame_5)
        self.label.setGeometry(QtCore.QRect(1580, 120, 101, 20))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.Rec_Size_Slider = QtWidgets.QSlider(self.frame_5)
        self.Rec_Size_Slider.setGeometry(QtCore.QRect(1610, 150, 22, 421))
        self.Rec_Size_Slider.setOrientation(QtCore.Qt.Vertical)
        self.Rec_Size_Slider.setObjectName("Rec_Size_Slider")
        self.frame_9 = QtWidgets.QFrame(self.frame_5)
        self.frame_9.setGeometry(QtCore.QRect(30, 620, 921, 931))
        self.frame_9.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_9.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_9.setObjectName("frame_9")
        self.Output_1_View = QtWidgets.QGraphicsView(self.frame_9)
        self.Output_1_View.setGeometry(QtCore.QRect(0, 0, 441, 371))
        self.Output_1_View.setObjectName("Output_1_View")
        self.Output_2_View = QtWidgets.QGraphicsView(self.frame_9)
        self.Output_2_View.setGeometry(QtCore.QRect(460, 0, 441, 371))
        self.Output_2_View.setObjectName("Output_2_View")
        self.horizontalLayout.addWidget(self.frame_5)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 2474, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_25.setText(_translate("MainWindow", "Image Number"))
        self.label_26.setText(_translate("MainWindow", "FT Components"))
        self.Mixing_Btn.setText(_translate("MainWindow", "Mixing"))
        self.Stop_Mixing_Btn.setText(_translate("MainWindow", "Stop Mixing"))
        self.Region_Mixing_Btn.setText(
            _translate("MainWindow", "Region Mixing"))
        self.Output1_RadioBtn.setText(_translate("MainWindow", "Output 1"))
        self.Output2_RadioBtn.setText(_translate("MainWindow", "Output2"))
        self.Real_Img_RadioBtn.setText(
            _translate("MainWindow", "Real and Imaginary"))
        self.Mag_Ph_RadioBtn.setText(_translate(
            "MainWindow", "Magnitude and Phase"))
        self.label_2.setText(_translate("MainWindow", "Component 1"))
        self.label_3.setText(_translate("MainWindow", "Component 2"))
        self.label_4.setText(_translate("MainWindow", "Component 3"))
        self.label_13.setText(_translate("MainWindow", "Component 4"))
        self.Inner_RadioBtn.setText(_translate("MainWindow", "Inner Region"))
        self.Outer_RadioBtn.setText(_translate("MainWindow", "Outer Region"))
        self.label.setText(_translate("MainWindow", "Rectangle Size"))
        # Connect double-click events to the image views
        self.Image_1_View.mouseDoubleClickEvent = lambda event: self.browse_and_convert(
            event, self.Image_1_View)
        self.Image_2_View.mouseDoubleClickEvent = lambda event: self.browse_and_convert(
            event, self.Image_2_View)
        self.Image_3_View.mouseDoubleClickEvent = lambda event: self.browse_and_convert(
            event, self.Image_3_View)
        self.Image_4_View.mouseDoubleClickEvent = lambda event: self.browse_and_convert(
            event, self.Image_4_View)

        # Connect the sliderReleased signal of sliders to corresponding slots
        self.Comp1_Slider.sliderReleased.connect(lambda: self.update_ft_component_slider(
            self.Comp1_Slider.value(), self.Comp1_ComboBox, "Image 1"))
        self.Comp2_Slider.sliderReleased.connect(lambda: self.update_ft_component_slider(
            self.Comp2_Slider.value(), self.Comp2_ComboBox, "Image 2"))
        self.Comp3_Slider.sliderReleased.connect(lambda: self.update_ft_component_slider(
            self.Comp3_Slider.value(), self.Comp3_ComboBox, "Image 3"))
        self.Comp4_Slider.sliderReleased.connect(lambda: self.update_ft_component_slider(
            self.Comp4_Slider.value(), self.Comp4_ComboBox, "Image 4"))

        # Connect the valueChanged signal of each slider to the corresponding LCD update function
        self.Comp1_Slider.valueChanged.connect(
            lambda value: self.update_lcd(self.Comp1_LCD, value))
        self.Comp2_Slider.valueChanged.connect(
            lambda value: self.update_lcd(self.Comp2_LCD, value))
        self.Comp3_Slider.valueChanged.connect(
            lambda value: self.update_lcd(self.Comp3_LCD, value))
        self.Comp4_Slider.valueChanged.connect(
            lambda value: self.update_lcd(self.Comp4_LCD, value))

        self.Mixing_Btn.clicked.connect(self.mix_and_display)

        # Connect the slider's valueChanged signal to a slot (update_displayed_regions)
        self.Rec_Size_Slider.valueChanged.connect(self.extract_region)

        # Connect the Region_Mixing_Btn click event to the handler
        self.Region_Mixing_Btn.clicked.connect(self.mix_regions)

        self.Mixing_Btn.clicked.connect(self.button_clicked)
        self.Region_Mixing_Btn.clicked.connect(self.button_clicked)

        self.Stop_Mixing_Btn.clicked.connect(self.stop_mixing)

        # Connect the activated signal of FT_Comp_ComboBox to the update_ft_components slot
        self.FT_Comp_ComboBox.activated.connect(self.update_ft_components)

        # Connect signal for radio buttons
        self.Real_Img_RadioBtn.toggled.connect(self.update_combobox_choices)
        self.Mag_Ph_RadioBtn.toggled.connect(self.update_combobox_choices)

        for image_view in [self.Image_1_View, self.Image_2_View, self.Image_3_View, self.Image_4_View]:
            image_view.mouseDoubleClickEvent = partial(
                self.browse_and_convert, image_view=image_view)

            # Connect mouse press and move events to the image views
            image_view.mousePressEvent = partial(
                self.mouse_press_event, image_view=image_view)
            image_view.mouseMoveEvent = partial(
                self.mouse_move_event, image_view=image_view)

        components_options = ["FT Magnitude",
                              "FT Phase", "FT Real", "FT Imaginary"]
        self.FT_Comp_ComboBox.addItems(components_options)

        Images_numbers = ["Image 1", "Image 2", "Image 3", "Image 4"]
        self.Img_Nb_ComboBox.addItems(Images_numbers)

        # Add map image views to image names
        self.image_view_to_name = {
            self.Image_1_View: "Image 1",
            self.Image_2_View: "Image 2",
            self.Image_3_View: "Image 3",
            self.Image_4_View: "Image 4",
        }

        # Initialize for storing Fourier transform data
        self.ft_component_data = {
            "Image 1": {"FT Magnitude": None, "FT Phase": None, "FT Real": None, "FT Imaginary": None},
            "Image 2": {"FT Magnitude": None, "FT Phase": None, "FT Real": None, "FT Imaginary": None},
            "Image 3": {"FT Magnitude": None, "FT Phase": None, "FT Real": None, "FT Imaginary": None},
            "Image 4": {"FT Magnitude": None, "FT Phase": None, "FT Real": None, "FT Imaginary": None}
        }

        # Initialize the   for storing adjusted Fourier transform data
        self.adjusted_ft_data = {
            "Image 1": {"FT Magnitude": None, "FT Phase": None, "FT Real": None, "FT Imaginary": None},
            "Image 2": {"FT Magnitude": None, "FT Phase": None, "FT Real": None, "FT Imaginary": None},
            "Image 3": {"FT Magnitude": None, "FT Phase": None, "FT Real": None, "FT Imaginary": None},
            "Image 4": {"FT Magnitude": None, "FT Phase": None, "FT Real": None, "FT Imaginary": None}
        }

        self.summed_ft_data = {
            "Summed Magnitude": None,
            "Summed Phase": None,
            "Summed Real": None,
            "Summed Imaginary": None
        }

        self.ft_component_extracted_region = {
            "Image 1":  None,
            "Image 2":  None,
            "Image 3": None,
            "Image 4": None
        }

        self.original_extracted_region = {
            "Image 1": None,
            "Image 2": None,
            "Image 3": None,
            "Image 4": None
        }

    def mouse_press_event(self, event, image_view):
        if event.button() == Qt.LeftButton:
            # Store the initial position for reference in mouse_move_event
            image_view.initial_pos = event.pos()

    def mouse_move_event(self, event, image_view):
        # Check if the left button is pressed and an initial position is stored
        if event.buttons() == Qt.LeftButton and hasattr(image_view, 'initial_pos'):
            # Calculate the vertical movement
            delta_y = event.pos().y() - image_view.initial_pos.y()

            # Calculate the horizontal movement
            delta_x = event.pos().x() - image_view.initial_pos.x()

            # Adjust the brightness based on the movement
            brightness_adjustment = delta_y*5
            self.adjust_image_brightness(image_view, brightness_adjustment)

            # Adjust the contrast based on the movement
            contrast_adjustment = delta_x
            self.adjust_image_contrast(image_view, contrast_adjustment)

    def adjust_image_contrast(self, image_view, contrast_adjustment):
        # Get the image name based on the image_view
        image_name = self.image_view_to_name.get(image_view, "Unknown Image")

        # Retrieve the time-domain data of the image
        time_domain_data = self.image_view_to_name.get(image_name)

        # Adjust the contrast of the image
        adjusted_image = self.modify_contrast(
            time_domain_data, contrast_adjustment)

        # Display the adjusted image in the QGraphicsView
        self.display_image_in_view(adjusted_image, image_view)

    def display_image_in_view(self, image, image_view):
        # Convert the image to QPixmap and scale it to fit within the QGraphicsView
        pixmap = QPixmap.fromImage(QImage(
            image.data, image.shape[1], image.shape[0], image.shape[1], QImage.Format_Grayscale8))
        scaled_pixmap = pixmap.scaled(
            image_view.width(), image_view.height(), Qt.KeepAspectRatio)

        # Update the QGraphicsView with the scaled image
        image_view.setSceneRect(
            0, 0, scaled_pixmap.width(), scaled_pixmap.height())
        image_view.setScene(QtWidgets.QGraphicsScene())
        image_view.scene().addPixmap(scaled_pixmap)

    def adjust_image_brightness(self, image_view, brightness_adjustment):
        # Get the image name based on the image_view
        image_name = self.image_view_to_name.get(image_view, "Unknown Image")

        # Retrieve the time-domain data of the image
        time_domain_data = self.image_view_to_name.get(image_name)

        # Adjust the brightness of the image
        adjusted_image = self.modify_brightness(
            time_domain_data, brightness_adjustment)

        # Display the adjusted image in the QGraphicsView
        self.display_image_in_view(adjusted_image, image_view)

    def modify_contrast(self, image, adjustment):
        # Perform contrast adjustment on the image
        alpha = 1.0 + adjustment / 100.0
        adjusted_image = cv2.multiply(image, alpha)

        # Ensure pixel values are within the valid range
        adjusted_image = np.clip(adjusted_image, 0, 255)

        return adjusted_image

    def modify_brightness(self, image, adjustment):
        # Perform brightness adjustment on the image
        adjusted_image = cv2.addWeighted(
            image, 1, np.zeros_like(image), 0, adjustment)

        # Ensure pixel values are within the valid range
        adjusted_image = np.clip(adjusted_image, 0, 255)

        return adjusted_image

    def browse_and_convert(self, event, image_view):
        if event.button() == Qt.LeftButton and event.modifiers() == Qt.NoModifier:
            file_dialog = QFileDialog()
            file_dialog.setNameFilter("Images (*.png *.xpm *.jpeg *.bmp)")
            file_dialog.setViewMode(QFileDialog.Detail)

            if file_dialog.exec_():
                file_path = file_dialog.selectedFiles()[0]

                # Read the time-domain data of the image
                time_domain_data = self.read_image_data(file_path)

                # Determine the image name based on the image_view
                image_name = self.image_view_to_name.get(
                    image_view, "Unknown Image")
                self.image_view_to_name[image_name] = time_domain_data

                # Print the contents of the image_data

                # Calculate Fourier transform data
                ft_magnitude, ft_phase, ft_real, ft_imaginary = self.calculate_fourier_transform(
                    time_domain_data)

                # Update with Fourier transform data
                self.ft_component_data[image_name]["FT Magnitude"] = ft_magnitude
                self.ft_component_data[image_name]["FT Phase"] = ft_phase
                self.ft_component_data[image_name]["FT Real"] = ft_real
                self.ft_component_data[image_name]["FT Imaginary"] = ft_imaginary

                # Print the contents of the ft_component_data

                image = QPixmap(file_path).toImage().convertToFormat(
                    QImage.Format_Grayscale8)

                # Scale the image to fit within the QGraphicsView
                scaled_image = image.scaled(
                    image_view.width(), image_view.height(), Qt.KeepAspectRatio)

                image_view.setSceneRect(
                    0, 0, scaled_image.width(), scaled_image.height())
                image_view.setScene(QtWidgets.QGraphicsScene())
                image_view.scene().addPixmap(QPixmap.fromImage(scaled_image))

    def read_image_data(self, file_path):
        # Read the image using OpenCV
        original_image = cv2.imread(file_path, cv2.IMREAD_GRAYSCALE)

        # Resize the image to a fixed size (e.g., 200x200 pixels)
        resized_image = cv2.resize(original_image, (200, 200))

        return resized_image

    def calculate_fourier_transform(self, time_domain_data):
        # Compute the discrete Fourier Transform of the image
        fourier = np.fft.fft2(time_domain_data)

        # Shift the zero-frequency component to the center of the spectrum
        fourier_shift = np.fft.fftshift(fourier)

        # Calculate the magnitude of the Fourier Transform
        ft_magnitude = np.abs(fourier_shift)

        # Calculate the phase of the Fourier Transform
        ft_phase = np.angle(fourier_shift)

        # Calculate the real part of the Fourier Transform
        ft_real = np.real(fourier_shift)

        # Calculate the imaginary part of the Fourier Transform
        ft_imaginary = np.imag(fourier_shift)

        return ft_magnitude, ft_phase, ft_real, ft_imaginary

    def update_ft_components(self):
        # Get the selected image name and Fourier component from the comboboxes
        selected_image = self.Img_Nb_ComboBox.currentText()
        selected_component = self.FT_Comp_ComboBox.currentText()

        # Retrieve the corresponding Fourier component data
        ft_component_data = self.ft_component_data.get(selected_image, {})
        ft_data = ft_component_data.get(selected_component, None)

        # Save the inner region in the ft_component_extracted_region
        self.original_extracted_region[selected_image] = ft_data

        if "FT Magnitude" == self.FT_Comp_ComboBox.currentText():
            # Apply logarithmic transformation to the magnitude
            ft_data = 20 * np.log(np.abs(ft_data))

        # Update the FT_component graphics view based on the selected image number
        if selected_image == "Image 1":
            self.display_ft_component(ft_data, self.Img1_Comp_View)
        elif selected_image == "Image 2":
            self.display_ft_component(ft_data, self.Img2_Comp_View)
        elif selected_image == "Image 3":
            self.display_ft_component(ft_data, self.Img3_Comp_View)
        elif selected_image == "Image 4":
            self.display_ft_component(ft_data, self.Img4_Comp_View)

    def display_ft_component(self, ft_data, ft_graphics_view):
        # Check if Fourier component data is available
        if ft_data is not None:

            # Normalize data to the range [0, 255]
            ft_data_normalized = cv2.normalize(
                ft_data, None, 0, 255, cv2.NORM_MINMAX, cv2.CV_8UC1)

            # Create QImage from the Fourier component data
            height, width = ft_data_normalized.shape[:2]
            q_image = QImage(ft_data_normalized.data, width, height,
                             ft_data_normalized.strides[0], QImage.Format_Grayscale8)

            # Convert QImage to QPixmap
            q_pixmap = QPixmap.fromImage(q_image)

            # Scale the image to fit within the QGraphicsView
            scaled_ft_pixmap = q_pixmap.scaled(
                ft_graphics_view.width(), ft_graphics_view.height(), Qt.KeepAspectRatio)

            # Display the Fourier component in the QGraphicsView
            ft_graphics_view.setSceneRect(
                0, 0, scaled_ft_pixmap.width(), scaled_ft_pixmap.height())
            ft_graphics_view.setScene(QtWidgets.QGraphicsScene())
            ft_graphics_view.scene().addPixmap(scaled_ft_pixmap)
        else:
            # Clear the QGraphicsView if Fourier component data is not available
            ft_graphics_view.setSceneRect(0, 0, 0, 0)
            ft_graphics_view.setScene(QtWidgets.QGraphicsScene())

    def update_combobox_choices(self):
        if self.Real_Img_RadioBtn.isChecked():
            # Real and Imaginary components
            component_choices = ["FT Real", "FT Imaginary"]
        elif self.Mag_Ph_RadioBtn.isChecked():
            # Magnitude and Phase components
            component_choices = ["FT Magnitude", "FT Phase"]
        else:
            # Default choices
            component_choices = []

        # Update combobox choices for all four components
        for combobox in [self.Comp1_ComboBox, self.Comp2_ComboBox, self.Comp3_ComboBox, self.Comp4_ComboBox]:
            combobox.clear()
            combobox.addItems(component_choices)

    def update_ft_component_slider(self, slider_value, combobox, image_name):
        # Get the selected component from the combobox
        selected_component = combobox.currentText()

        # Retrieve the corresponding Fourier component data
        ft_component_data = self.ft_component_data.get(image_name, {})
        ft_data = ft_component_data.get(selected_component, None)

        if ft_data is not None:
            # Apply the slider value as a percentage of the max value to all components
            slider_percentage = slider_value / max(self.Comp1_Slider.maximum(), self.Comp2_Slider.maximum(),
                                                   self.Comp3_Slider.maximum(), self.Comp4_Slider.maximum())
            adjusted_ft_data = {key: value * slider_percentage if key ==
                                selected_component else None for key, value in ft_component_data.items()}

            # Fill None values with zeros
            adjusted_ft_data = {key: value if value is not None else np.zeros_like(
                ft_component_data[selected_component]) for key, value in adjusted_ft_data.items()}

            # Save the adjusted array
            self.adjusted_ft_data[image_name] = adjusted_ft_data

            # Sum the available data and update the summed_ft_data
            for name, data in self.adjusted_ft_data.items():
                if data["FT Magnitude"] is not None:
                    self.summed_ft_data["Summed Magnitude"] = data["FT Magnitude"]
                if data["FT Phase"] is not None:
                    self.summed_ft_data["Summed Phase"] = data["FT Phase"]
                if data["FT Real"] is not None:
                    self.summed_ft_data["Summed Real"] = data["FT Real"]
                if data["FT Imaginary"] is not None:
                    self.summed_ft_data["Summed Imaginary"] = data["FT Imaginary"]

            # Create new arrays to store summed data
        summed_magnitude = np.zeros_like(ft_component_data["FT Magnitude"])
        summed_phase = np.zeros_like(ft_component_data["FT Phase"])
        summed_real = np.zeros_like(ft_component_data["FT Real"])
        summed_imaginary = np.zeros_like(ft_component_data["FT Imaginary"])

        for name, data in self.adjusted_ft_data.items():
            if data["FT Magnitude"] is not None:
                summed_magnitude += data["FT Magnitude"]

            if data["FT Phase"] is not None:
                summed_phase += data["FT Phase"]

            if data["FT Real"] is not None:
                summed_real += data["FT Real"]

            if data["FT Imaginary"] is not None:
                summed_imaginary += data["FT Imaginary"]

        # Update the summed_ft_data with the accumulated values
        self.summed_ft_data = {
            "Summed Magnitude": summed_magnitude,
            "Summed Phase": summed_phase,
            "Summed Real": summed_real,
            "Summed Imaginary": summed_imaginary,
        }
        # Print the contents of the summed_ft_data

    def mix_and_display(self):
        # Check if the Magnitude and Phase radio button is checked
        if self.Mag_Ph_RadioBtn.isChecked():
            # Check if the Magnitude and Phase components are available in summed_ft_data
            if "Summed Magnitude" in self.summed_ft_data and "Summed Phase" in self.summed_ft_data:
                # Mix the Magnitude and Phase components
                mixed_ft_data = self.summed_ft_data["Summed Magnitude"] * np.exp(
                    1j * self.summed_ft_data["Summed Phase"])

                # Perform inverse Fourier transform
                mixed_time_domain_data = np.fft.ifft2(
                    np.fft.ifftshift(mixed_ft_data)).real

                # Display the mixed time domain data as an image
                self.display_time_domain_image(
                    mixed_time_domain_data, self.Output1_RadioBtn.isChecked())
            else:
                print(
                    "Error: Magnitude and Phase components are not available for mixing.")

        # Check if the Magnitude and Phase radio button is checked
        if self.Real_Img_RadioBtn.isChecked():
            # Check if the Magnitude and Phase components are available in summed_ft_data
            if "Summed Imaginary" in self.summed_ft_data and "Summed Real" in self.summed_ft_data:
                # Mix the Magnitude and Phase components
                mixed_ft_data = self.summed_ft_data["Summed Real"] + \
                    1j * self.summed_ft_data["Summed Imaginary"]

                # Perform inverse Fourier transform
                mixed_time_domain_data = np.fft.ifft2(
                    np.fft.ifftshift(mixed_ft_data)).real

                # Display the mixed time domain data as an image
                self.display_time_domain_image(
                    mixed_time_domain_data, self.Output1_RadioBtn.isChecked())
            else:
                print(
                    "Error: Magnitude and Phase components are not available for mixing.")

    def display_time_domain_image(self, time_domain_data, is_output_1):
        # Normalize the time domain data to the range [0, 255]
        time_domain_data_normalized = cv2.normalize(
            time_domain_data, None, 0, 255, cv2.NORM_MINMAX, cv2.CV_8UC1)

        # Create QImage from the time domain data
        height, width = time_domain_data_normalized.shape[:2]
        q_image = QImage(time_domain_data_normalized.data, width, height,
                         time_domain_data_normalized.strides[0], QImage.Format_Grayscale8)

        # Convert QImage to QPixmap
        q_pixmap = QPixmap.fromImage(q_image)

        # Scale the image to fit within the QGraphicsView
        scaled_time_domain_pixmap = q_pixmap.scaled(
            self.Output_1_View.width(), self.Output_1_View.height(), Qt.KeepAspectRatio)

        # Display the time domain image in the QGraphicsView
        if is_output_1:
            self.Output_1_View.setSceneRect(
                0, 0, scaled_time_domain_pixmap.width(), scaled_time_domain_pixmap.height())
            self.Output_1_View.setScene(QtWidgets.QGraphicsScene())
            self.Output_1_View.scene().addPixmap(scaled_time_domain_pixmap)
        else:
            self.Output_2_View.setSceneRect(
                0, 0, scaled_time_domain_pixmap.width(), scaled_time_domain_pixmap.height())
            self.Output_2_View.setScene(QtWidgets.QGraphicsScene())
            self.Output_2_View.scene().addPixmap(scaled_time_domain_pixmap)

    def extract_region(self):
        self.ft_component_extracted_region = self.original_extracted_region.copy()

        slider_value = self.Rec_Size_Slider.value()

        for image, ft_data in self.ft_component_extracted_region.items():
            if ft_data is not None:
                region = ft_data.copy()

                if self.Inner_RadioBtn.isChecked():
                    region[:100-slider_value, :] = 0
                    region[100+slider_value:, :] = 0
                    region[:, :100-slider_value] = 0
                    region[:, 100+slider_value:] = 0
                else:
                    region[100-slider_value:100+slider_value,
                           100-slider_value:100+slider_value] = 0

                # Save the inner region in the ft_component_extracted_region
                self.ft_component_extracted_region[image] = region

                # Update the FT_component graphics view based on the selected image number
                if image == "Image 1":
                    self.display_ft_component(region, self.Img1_Comp_View)
                elif image == "Image 2":
                    self.display_ft_component(region, self.Img2_Comp_View)
                elif image == "Image 3":
                    self.display_ft_component(region, self.Img3_Comp_View)
                elif image == "Image 4":
                    self.display_ft_component(region, self.Img4_Comp_View)

    def mix_regions(self):
        if self.Mag_Ph_RadioBtn.isChecked():
            # Check if the Magnitude and Phase components are available in summed_ft_data
            if "Image 1" in self.ft_component_extracted_region and "Image 2" in self.ft_component_extracted_region:
                # Mix the Magnitude and Phase components
                mixed_ft_data = self.ft_component_extracted_region["Image 1"] * np.exp(
                    1j * self.ft_component_extracted_region["Image 2"])

                # Perform inverse Fourier transform
                mixed_time_domain_data = np.fft.ifft2(
                    np.fft.ifftshift(mixed_ft_data)).real

                # Display the mixed time domain data as an image
                self.display_time_domain_image(
                    mixed_time_domain_data, self.Output1_RadioBtn.isChecked())
            else:
                print(
                    "Error: Magnitude and Phase components are not available for mixing.")

        # Check if the Magnitude and Phase radio button is checked
        if self.Real_Img_RadioBtn.isChecked():
            # Check if the Magnitude and Phase components are available in summed_ft_data
            if "Image 3" in self.ft_component_extracted_region and "Image 4" in self.ft_component_extracted_region:
                # Mix the Magnitude and Phase components
                mixed_ft_data = self.ft_component_extracted_region["Image 3"] + \
                    1j * self.ft_component_extracted_region["Image 4"]

                # Perform inverse Fourier transform
                mixed_time_domain_data = np.fft.ifft2(
                    np.fft.ifftshift(mixed_ft_data)).real

                # Display the mixed time domain data as an image
                self.display_time_domain_image(
                    mixed_time_domain_data, self.Output1_RadioBtn.isChecked())
            else:
                print(
                    "Error: Magnitude and Phase components are not available for mixing.")

    def stop_mixing(self):
        self.progressBar.reset()

        self.Output_1_View.setSceneRect(0, 0, 0, 0)
        self.Output_1_View.setScene(QtWidgets.QGraphicsScene())

        self.Output_2_View.setSceneRect(0, 0, 0, 0)
        self.Output_2_View.setScene(QtWidgets.QGraphicsScene())

    def button_clicked(self):
        # Reset the progress bar to its initial state
        self.progressBar.reset()

        # Start the progress bar when Region_Mixing_Btn is clicked
        self.start_progress_bar()

    def start_progress_bar(self):
        # Calculate the number of steps to complete in 1 second with an update every 20 milliseconds
        steps_in_1_second = 1000 / 20
        total_steps = int(steps_in_1_second)

        # Set the maximum value of the progress bar
        self.progressBar.setMaximum(total_steps)

        # Calculate the update interval to achieve completion in 1 second
        update_interval = int(100 / total_steps)  # Convert to integer

        # Create a QTimer with MainWindow as the parent
        self.progress_timer = QTimer(MainWindow)
        self.progress_timer.timeout.connect(self.update_progress)

        # Update the progress every calculated interval
        self.progress_timer.start(update_interval)

    def update_progress(self):
        # Get the current value of the progress bar
        current_value = self.progressBar.value()

        # Increment the progress value
        new_value = current_value + 1

        # Update the progress bar value
        self.progressBar.setValue(new_value)

        # Check if the progress bar has reached its maximum value
        if new_value >= self.progressBar.maximum():
            # Stop the progress bar and reset the timer
            self.progress_timer.stop()

    def update_lcd(self, lcd, value):
        lcd.display(value)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
